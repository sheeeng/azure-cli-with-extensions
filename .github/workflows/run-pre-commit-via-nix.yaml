name: Run Pre-Commit via Nix

permissions:
  actions: write
  contents: read

on:
  pull_request:
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: "${{ github.workflow }}-${{ github.head_ref || github.sha }}"
  cancel-in-progress: true

jobs:
  run-pre-commit:
    name: Run Pre-Commit
    timeout-minutes: 20
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - uses: nixbuild/nix-quick-install-action@c57091870f58910a7aef53a0b0a99f6ba568aa6f # v34
        with:
          nix_conf: |
            experimental-features = flakes nix-command # https://nix.dev/manual/nix/unstable/command-ref/conf-file.html#conf-experimental-features
            keep-env-derivations = true
            keep-outputs = true
            # Support enhanced caching.
            auto-optimise-store = true
            trusted-users = root ${{ github.actor }}
            # Improve build performance.
            max-jobs = auto
            cores = 0
            # Configure substituters.
            substituters = https://cache.nixos.org/ https://nix-community.cachix.org
            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs=

      - uses: nix-community/cache-nix-action@e2cf51da82e145785f5db595f553f7cbc2ca54df # v6.1.3
        with:
          # Restore and save a cache using this key.
          # Focus on flake.lock and flake.nix as they determine actual dependencies.
          primary-key: nix-${{ runner.os }}-${{ hashFiles('flake.nix', 'flake.lock') }}
          # If there's no cache hit, restore a cache by this prefix.
          # Use more granular prefixes to get better partial cache hits.
          restore-prefixes-first-match: |
            nix-${{ runner.os }}-${{ hashFiles('flake.nix', 'flake.lock') }}
            nix-${{ runner.os }}-${{ hashFiles('flake.nix') }}
            nix-${{ runner.os }}-
          # Appends it to default paths and uses the resulting list for restoring and saving caches.
          paths: |
            ~/.cache/pre-commit/
          # Explicitly save the cache.
          save: true
          # Enable nix store caching. # https://github.com/nix-community/cache-nix-action/blob/e2cf51da82e145785f5db595f553f7cbc2ca54df/action.yml#L63
          nix: true
          # Collect garbage until the Nix store size is at most this number before trying to save a new cache.
          gc-max-store-size-linux: 4G
          # Purge caches.
          purge: true
          # Purge specific cache versions only.
          purge-prefixes: |
            nix-${{ runner.os }}-
          # Created more than this number of seconds ago.
          purge-created: 432000 # 432000 seconds is 5 days.
          # Or caches not accessed in the last 3 days.
          purge-last-accessed: 259200 # 259200 seconds is 3 days.
          # Except any version with the key that is the same as the `primary-key`.
          purge-primary-key: never

      - name: Reuse Cache or Rebuild
        timeout-minutes: 15 # Allow sufficient buffer time for Nix to rebuild Nix store.
        run: |
          echo "=== Building with Using Shell ==="
          # Build the development shell without entering it.
          nix build .#devShells.x86_64-linux.default --no-link || {
            echo "Failed to build development shell, trying alternative approach..."
            # Try flake check to validate the flake.
            nix flake check --no-eval-cache || echo "Flake check failed."
          }

          echo "=== Use Shell ==="
          nix develop --command bash -c "
            echo 'Successfully entered nix develop environment.'
            echo \"\${PATH}: \${PATH}\"
            echo 'Checking for pre-commit...'
            if ! command -v pre-commit &> /dev/null; then
              echo '❌ Missing pre-commit tool.'
              echo 'Available commands in environment:'
              compgen -c | grep -E '^(pre-commit|terraform|keep-sorted|az)' | head -10
              exit 1
            fi
            echo '✅ Found pre-commit \$(pre-commit --version | cut --delimiter=\" \" --fields=2) in Nix environment.'
          "

      - name: Install Pre-Commit
        timeout-minutes: 5 # Nix store should already be built and cached. But, install hooks from external sources may take time.
        run: |
          nix develop --command bash -c '
            echo "Installing pre-commit hooks..."
            pre-commit install-hooks
          '

      - name: Run Pre-Commit
        timeout-minutes: 5 # Nix store should already be built and cached. But, running hooks on all files may take time.
        run: |
          nix develop --command bash -c "
            echo 'Pre-Commit Version: \$(pre-commit --version)'
            echo 'Installing pre-commit hooks...'
            pre-commit install-hooks
            # Run pre-commit on all files for push to main branch, otherwise only on changed files.
            if [[ \"\${{ github.event_name }}\" == \"push\" && \"\${{ github.ref }}\" == \"refs/heads/main\" ]]; then
              echo 'Running pre-commit on all files (push to main branch)'
              pre-commit run --all-files
            else
              echo 'Running pre-commit on changed files only'
              # For pull requests, run on files changed compared to the target branch.
              if [[ \"\${{ github.event_name }}\" == \"pull_request\" ]]; then
                pre-commit run --from-ref=origin/\${{ github.base_ref }} --to-ref=HEAD
              else
                # For other events, run on all files as fallback.
                pre-commit run --all-files
              fi
            fi
          "

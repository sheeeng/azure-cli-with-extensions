name: Run Pre-Commit via Nix

permissions:
  actions: write
  contents: read

on:
  pull_request:
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: "${{ github.workflow }}-${{ github.head_ref || github.sha }}"
  cancel-in-progress: true

jobs:
  run-pre-commit:
    name: Run Pre-Commit
    timeout-minutes: 20
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - uses: nixbuild/nix-quick-install-action@c57091870f58910a7aef53a0b0a99f6ba568aa6f # v34
        with:
          nix_conf: |
            experimental-features = flakes nix-command # https://nix.dev/manual/nix/unstable/command-ref/conf-file.html#conf-experimental-features
            keep-env-derivations = true
            keep-outputs = true
            # Support enhanced caching.
            auto-optimise-store = true
            trusted-users = root ${{ github.actor }}
            # Improve build performance.
            max-jobs = auto
            cores = 0
            # Configure substituters.
            substituters = https://cache.nixos.org/ https://nix-community.cachix.org
            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs=

      # Temporarily disable cache to fix corruption issues
      # - uses: nix-community/cache-nix-action@e2cf51da82e145785f5db595f553f7cbc2ca54df # v6.1.3
      #   with:
      #     # Restore and save a cache using this key.
      #     # Focus on flake.lock and flake.nix as they determine actual dependencies.
      #     primary-key: nix-${{ runner.os }}-${{ hashFiles('flake.nix', 'flake.lock') }}
      #     # If there's no cache hit, restore a cache by this prefix.
      #     # Use more granular prefixes to get better partial cache hits.
      #     restore-prefixes-first-match: |
      #       nix-${{ runner.os }}-${{ hashFiles('flake.nix', 'flake.lock') }}
      #       nix-${{ runner.os }}-${{ hashFiles('flake.nix') }}
      #       nix-${{ runner.os }}-
      #     # Cache additional paths for pre-commit and other tools.
      #     paths: |
      #       ~/.cache/pre-commit/
      #     # Explicitly save the cache.
      #     save: true
      #     # Enable nix store caching. # https://github.com/nix-community/cache-nix-action/blob/e2cf51da82e145785f5db595f553f7cbc2ca54df/action.yml#L63
      #     nix: true
      #     # Collect garbage until the Nix store size is at most this number before trying to save a new cache.
      #     gc-max-store-size-linux: 2G
      #     # Clear old caches to prevent stale references.
      #     purge: true
      #     # Purge ALL cache versions for this workflow to prevent stale store path issues.
      #     purge-prefixes: |
      #       nix-${{ runner.os }}-
      #     # Purge caches older than 1 day to prevent stale store path references.
      #     purge-created: 86400 # 86400 seconds is 1 day.
      #     # Never purge the current primary key.
      #     purge-primary-key: never

      - name: Build and Test
        timeout-minutes: 15 # Allow sufficient buffer time for Nix to rebuild Nix store.
        run: |
          echo "=== Debugging Information ==="
          echo "Working directory: $(pwd)"
          echo "Nix version: $(nix --version)"
          echo "Available files:"
          ls -la
          
          echo "=== Building Development Shell ==="
          # Detect current system architecture
          SYSTEM=$(nix eval --impure --raw --expr 'builtins.currentSystem')
          echo "Detected system: $SYSTEM"

          # Clean approach - build directly without cache corruption
          echo "=== Building Development Shell Fresh ==="
          nix build ".#devShells.$SYSTEM.default" --no-link
          
          echo "✅ Development shell build completed successfully"

      - name: Verify Development Environment
        timeout-minutes: 5
        run: |
          echo "=== Verify Development Environment ==="
          nix develop --command bash -c '
            echo "Successfully entered nix develop environment."
            echo "PATH: $PATH"
            echo "Checking for required tools..."
            if ! command -v pre-commit &> /dev/null; then
              echo "❌ Missing pre-commit tool."
              echo "Available commands in environment:"
              compgen -c | grep -E "^(pre-commit|terraform|keep-sorted|az)" | head -10
              exit 1
            fi
            echo "✅ Found pre-commit $(pre-commit --version | cut -d" " -f2) in Nix environment."
          '

      - name: Install Pre-Commit
        timeout-minutes: 5 # Nix store should already be built and cached. But, install hooks from external sources may take time.
        run: |
          nix develop --command bash -c '
            echo "Installing pre-commit hooks..."
            pre-commit install-hooks
          '

      - name: Run Pre-Commit
        timeout-minutes: 5 # Nix store should already be built and cached. But, running hooks on all files may take time.
        run: |
          nix develop --command bash -c '
            echo "Pre-Commit Version: $(pre-commit --version)"
            echo "Installing pre-commit hooks..."
            pre-commit install-hooks

            # Determine which files to check
            if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
              echo "Running pre-commit on all files (push to main branch)"
              pre-commit run --all-files
            elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
              echo "Running pre-commit on changed files only"
              pre-commit run --from-ref=origin/${{ github.base_ref }} --to-ref=HEAD
            else
              echo "Running pre-commit on all files as fallback"
              pre-commit run --all-files
            fi
          '
